Lambda with FI
------------------

a. Example 1
1. Implementation of interface before java 8

interface Interf{
	public void m1();
}

class Demo implements Interf{
	
	public void m1(){
		System.out.println("Hello...");
	}
	
}

public class Test{
	public static void main(String [] args){
		Demo d = new Demo();
		d.m1();
	}
}


2. In Java8

interface Interf{
	public void m1();
}

public class Test{
	public static void main(String [] args){
		Interf i = ()-> System.out.println("Hello..."); /* we can provide implementation to abstract method by lambda expression, and since we
		can have only one method then this implemenation is surely for that method only */
    		i.m1();
	}
}

/*
OUTPUT : Hello...
*/


b. Example 2

// without java 8
interface Interf{
	public void add(int a, int b);
	
}

class Demo implements Interf{
	public void add(int a, int b){
		System.out.println("Sum is "+ (a+b));
	}
}

public class Test{
	public static void main(String [] args){
		Interf i = new Demo();
		i.add(10,20);
	}
}

//with java8

interface Interf{
	public void add(int a, int b);
	
}


public class Test{
	public static void main(String [] args){
		Interf i = (a,b)->System.out.println("Sum is "+ (a+b));//here , compiler always consider abstract method of Interf, so compiler can able to guess the type
		i.add(10,20);
	}
}

/*
Sum is 30
*/

Lambda expressions only associated with Functional Interfaces. Without FI we cant implement lambda expression.
